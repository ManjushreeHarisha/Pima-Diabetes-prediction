inspect(Groc[1:3])
install.packages("inspect")
install.packages("TCGAGBM")
library("boot", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("class", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("tcltk", lib.loc="C:/Program Files/R/R-3.3.2/library")
detach("package:tcltk", unload=TRUE)
library("tcltk", lib.loc="C:/Program Files/R/R-3.3.2/library")
itemFrequency(Groc[,1])
detach("package:tcltk", unload=TRUE)
detach("package:boot", unload=TRUE)
detach("package:class", unload=TRUE)
install.packages("C:/Users/chetan j/Downloads/tm_0.6.tar.gz", repos = NULL, type = "source")
inspect(Groc[1:3])
install.packages("tm")
require("tm")
inspect(Groc[1:3])
data()
groceries <- read.table("C:\\Users\\CHETAN~1\\AppData\\Local\\Temp\\Rtmpu8X31x\\data14d855021b59", header=TRUE, quote="\"")
View(groceries)
require("tm")
inspect(groceries[1:3])
data()
groceries <- read.table("C:\\Users\\CHETAN~1\\AppData\\Local\\Temp\\Rtmpu8X31x\\data14d817b01a79", header=TRUE, quote="\"")
View(groceries)
groceries <- read.csv("C:/Users/chetan j/Desktop/groceries.csv")
View(groceries)
require("tm")
inspect(groceries[1:3])
inspect(groceries[1:3])
data(groceries.csv)
data("groceries.csv")
Groc<-read.table("C:\Users\chetan j\Desktop\groceries.csv",header=T,sep=",")
Groc<-read.table("C:\\Users\chetan j\Desktop\groceries.csv",header=T,sep=",")
Groc<-read.table("C:\\Users\\chetan j\\Desktop\\groceries.csv",header=T,sep=",")
Groc=data(groceries.csv)
Groc=data("groceries.csv")
Groc=data("C:\\Users\\chetan j\\Desktop\\groceries.csv")
View(groceries)
view(groceries)
Groc=data("C:\\Users\\chetan j\\Desktop\\groceries.csv")
inspect(Groc[1:3])
require("tm")
inspect(Groc[1:3])
groceries <- read.table("C:\\Users\\CHETAN~1\\AppData\\Local\\Temp\\Rtmpu8X31x\\data14d8392a13ce", header=TRUE, quote="\"")
View(groceries)
credit <- read.table("C:\\Users\\CHETAN~1\\AppData\\Local\\Temp\\Rtmpu8X31x\\data14d8bab7f9b", header=TRUE, quote="\"")
View(credit)
Groc<-read.table("C:\\Users\\chetan j\\Desktop\\groceries.csv",header=T,sep=",")
view("groceries")
Groc=data("groceries.csv")
groceries <- read.table("C:\\Users\\CHETAN~1\\AppData\\Local\\Temp\\Rtmpu8X31x\\data14d8392a13ce", header=TRUE, quote="\"")
file<-read.csv("groceries.csv")
View(file)
data<-data.frame(file$citrus.fruit)
data
head(data)
data<-data.frame(file$citrus.fruit,file$semi.finished.bread)
head(data)
file[1,3]
data[1,3]
data[1:3]
file[1:3]
file[1]
inspect(file[1:3])
inspect(file[1,3])
class(file)
class(data)
data
file
file[1:50,]
file[1:50]
file[1:50,]
Groc=read.csv("groceries.csv")
inspect(Groc[1:3])
install.packages("transaction")
install.packages("arules")
require("arules")
data(package="arules")
Groc<-read.transactions("groceries.csv",sep=",")
inspect(Groc[1:3])
data("Groceries")
data("Groceries")
view("Groceries")
view(Groc)
summary(Groc)
clearPushBack()
require(arules)
data(package=arules)
data(package="arules")
Groc<-read.csv("groceries.csv",Header=F,sep=",")
Groc<-read.csv("groceries.csv",Header=FALSE,sep=",")
Groc<-read.csv("groceries.csv",header=FALSE,sep=",")
data("Groc")
view(Groc)
Groc=read.transactions("groceries.csv",header=F,sep=",")
Groc=read.transactions("groceries.csv",header=FALSE,sep=",")
require(arules)
Groc<-read.transactions("groceries.csv",sep=",")
m1=apriori(Groc,parameter=list(support=0.07 , confidence=0.25,minlen=2)
)
m1=apriori(Groc,parameter=list(support=0.07 , confidence=0.25,minlen=2))
m1
m1=apriori(Groc,parameter=list(support=0.007 , confidence=0.25,minlen=2))
m1
inspect(m1[1:5])
itemFrequencyPlot(Groc,support=0.2)
itemFrequencyPlot(Groc,topN=10)
inspect(sort(m1,by="lift")[1:4])
plot(sort(m1,by="lift")[1:4],support=0.007)
ItemFrequencyPlot(sort(m1,by="lift")[1:4],support=0.007)
itemFrequencyPlot(sort(m1,by="lift")[1:4],support=0.007)
install.packages("arulesViz")
require("arules")
Groc=read.transactions("groceries.csv",sep=",")
inspect(Groc[1:4])
itemFrequencyPlot(Groc,topN4)
itemFrequencyPlot(Groc,support=0.001)
itemFrequencyPlot(Groc,support=0.007)
itemFrequencyPlot(Groc,support=0.07)
itemFrequencyPlot(Groc,topN=5)
itemfrequencyplot(Groc,support=0.007)
itemFrequencyplot(Groc,support=0.007)
itemFrequencyPlot(Groc,support=0.07)
itemFrequencyPlot(Groc,topN=5)
Groc <- read.ransactions("groceries.csv",sep=",")
Groc <- read.transactions("groceries.csv",sep=",")
Groc
itemFrequencyPlot(Groc,topN=7)
require("arules")
Groc=read.transactions("groceries.csv",sep=",")
summary(Groc)
inspect(Groc[1:10])
itemFrequency(Groc[ ,1:10])
itemFrequencyPlot(GRoc,support=0.10)
itemFrequencyPlot(Groc,topN=10)
itemFrequencyPlot(Groc,support=0.10)
itemFrequencyPlot(Groc,topN=10)
itemFrequencyPlot(Groc,support=0.10)
itemFrequencyPlot(Groc,support=0.001)
itemFrequencyPlot(Groc,topN=10)
m1<-apriori(Groc,parameter=list(support=0.007,confidence=0.25,minlen=2))
m1<-apriori(Groc,parameter=list(support=0.007,confidence=0.25,minlen=2))
summary(m1)
inspect(m1[1:5])      #for frequent itemset with length 2
inspect(m1[138:142])  #for frequent itemset with length 3
inspect(m1[215:220])
inspect(sort(m1,by="lift")[1:5])
inspect(sort(m1,by="support")[1:5])
inspect(sort(m1,by="confidence")[1:5])
inspect(m1[352:357])
itemFrequencyPlot(m1,support=0.007)
m2=read.transactions(m1)
itemFrequencyPlot(m2,support=0.007)
m1=apriori(Groc,parameter=list(support=0.007 , confidence=0.25,minlen=2))
inspect(sort(m1,by="support")[1:5])
require("arules")
Groc=read.transactions("groceries.csv",sep=",")
summary(Groc)
inspect(Groc[1:10])
itemFrequency(Groc[ ,1:10])
itemFrequencyPlot(Groc,support=0.10)
itemFrequencyPlot(Groc,topN=10)
m1<-apriori(Groc,parameter=list(support=0.007,confidence=0.25,minlen=2))
summary(m1)
inspect(m1[1:5])
inspect(m1[138:142])
inspect(m1[352:357])
inspect(sort(m1,by="lift")[1:5])
inspect(sort(m1,by="support")[1:5])
inspect(sort(m1,by="confidence")[1:5])
itemFrequency(Groc[ ,1:10])
inspect(sort(m1,by="lift")[1:5]
)
require("arules")
Groc=read.transactions("groceries.csv",sep=",")
summary(Groc)
inspect(Groc[1:10])
itemFrequency(Groc[ ,1:10])
itemFrequencyPlot(Groc,support=0.10)
itemFrequencyPlot(Groc,topN=10)
m1<-apriori(Groc,parameter=list(support=0.007,confidence=0.25,minlen=2))
summary(m1)
inspect(m1[1:5])      #for frequent itemset with length 2
inspect(m1[138:142])  #for frequent itemset with length 3
inspect(m1[352:357])
inspect(sort(m1,by="lift")[1:5])
inspect(sort(m1,by="support")[1:5])
inspect(sort(m1,by="confidence")[1:5])
class(Groc)
head(Groc)
inspect(Groc)
require("arules")
Groc=read.transactions("groceries.csv",sep=",")
summary(Groc)
inspect(Groc[1:10])
itemFrequency(Groc[ ,1:10])
itemFrequencyPlot(Groc,support=0.10)
itemFrequencyPlot(Groc,topN=10)
m1<-apriori(Groc,parameter=list(support=0.007,confidence=0.25,minlen=2))
summary(m1)
inspect(m1[1:5])      #for frequent itemset with length 2
inspect(m1[138:142])  #for frequent itemset with length 3
inspect(m1[352:357])
require("arules")
Groc=read.transactions("groceries.csv",sep=",")
summary(Groc)
inspect(Groc[1:10])
itemFrequency(Groc[ ,1:10])
itemFrequencyPlot(Groc,support=0.10)
itemFrequencyPlot(Groc,topN=10)
m1<-apriori(Groc,parameter=list(support=0.007,confidence=0.25,minlen=2))
summary(m1)
inspect(m1[1:5])      #for frequent itemset with length 2
inspect(m1[138:142])  #for frequent itemset with length 3
inspect(m1[352:357])  #for frequent itemset with length 4
inspect(sort(m1,by="lift")[1:5])
inspect(sort(m1,by="support")[1:5])
inspect(sort(m1,by="confidence")[1:5])
import package.arules
data(package='arules')
groc<-read.transactions("Groceries.csv",sep=',')
groc
summary(groc)
itemFrequency(groc[,3])
itemFrequency(groc[1,3])
itemFrequency(groc)
itemFrequency(groc[1,10])
itemFrequency(groc[10])
stu<-read.csv("Q1a.csv")
stu
install.packages('shinyjs')
shiny::runApp('E:/4thyear/pbl/pima-indians-diabetes-database')
runApp('E:/4thyear/pbl/pima-indians-diabetes-database')
runApp('E:/4thyear/pbl/pima-indians-diabetes-database')
runApp('E:/4thyear/pbl/pima-indians-diabetes-database')
runApp('E:/4thyear/pbl/pima-indians-diabetes-database')
runApp('E:/4thyear/pbl/pima-indians-diabetes-database')
?div()
runApp('E:/4thyear/pbl/pima-indians-diabetes-database')
runApp('E:/4thyear/pbl/pima-indians-diabetes-database')
?hidden()
hidden(list(span(id = "a"), div(id = "b")))
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
actionButton("btn", "Click me"),
hidden(
p(id = "element", "I was born invisible")
)
),
server = function(input, output) {
observeEvent(input$btn, {
show("element")
})
}
)
}
seq(5)
runApp('E:/4thyear/pbl/pima-indians-diabetes-database')
>div()
?div()
runApp('E:/4thyear/pbl/pima-indians-diabetes-database')
runApp('E:/4thyear/pbl/pima-indians-diabetes-database')
runApp('E:/4thyear/pbl/pima-indians-diabetes-database')
runApp('E:/4thyear/pbl/pima-indians-diabetes-database')
runApp('E:/4thyear/pbl/pima-indians-diabetes-database')
runApp('E:/4thyear/pbl/pima-indians-diabetes-database')
runApp('E:/4thyear/pbl/pima-indians-diabetes-database')
runApp('E:/4thyear/pbl/pima-indians-diabetes-database')
runApp('E:/4thyear/pbl/pima-indians-diabetes-database')
k
runApp('E:/4thyear/pbl/pima-indians-diabetes-database')
runApp('E:/4thyear/pbl/pima-indians-diabetes-database')
runApp('E:/4thyear/pbl/pima-indians-diabetes-database')
runApp('E:/4thyear/pbl/pima-indians-diabetes-database')
>toggleState()
?toggleState()
runApp('E:/4thyear/pbl/pima-indians-diabetes-database')
runApp('E:/4thyear/pbl/pima-indians-diabetes-database')
runApp('E:/4thyear/pbl/pima-indians-diabetes-database')
runApp('E:/4thyear/pbl/pima-indians-diabetes-database')
?hide()
library(e1071)
m2 <- svm(Outcome~., data = diabetes)
k <- plot(m2, diabetes, BMI~ Pregnancies)
setwd("E:/4thyear/pbl2/implementation")
library('caret')
set.seed(130)
diabetes <- read.csv('diabetes.csv')
#diabetes <- diabetes[,c("Glucose","BMI","Insulin","Outcome")]
library('caTools')
diabetes[,"Outcome"] <- as.factor(diabetes[,"Outcome"])
str(diabetes)
inter <- sample.split(Y=diabetes$Outcome, SplitRatio=0.8)
trainData <- diabetes[inter, ]
testData <- diabetes[!inter, ]
trctrl <- trainControl(method = "repeatedcv", number = 6, repeats = 3)
grid <- expand.grid(C = c(0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2,5))
#mtrygrid <- expand.grid(mtry=3)
svm_Linear <- train(Outcome~., data = testData, method = "svmLinear",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneGrid=grid,
tuneLength = 15
)
svm_Linear
test_pred <- predict(svm_Linear, newdata = testData)
test_pred
t <- table(predictions=test_pred, actual=testData$Outcome)
t
sum(diag(t))/sum(t)
library(e1071)
m2 <- svm(Outcome~., data = diabetes)
k <- plot(m2, diabetes, BMI~ Pregnancies)
k <- plot(m2, diabetes, Glucose~ Pregnancies)
plot(diabetes$Glucose,diabetes$Pregnancies,col=diabetes$Outcome)
plot(diabetes$Glucose,diabetes$Age,col=diabetes$Outcome)
plot(diabetes)
head(diabetes[1:2])
plot(diabetes[1:2])
plot(diabetes[1:4])
plot(diabetes$Glucose,diabetes$Age,col=diabetes$Outcome)
plot(m2, diabetes, Glucose ~ Pregnancies)
plot(m2, diabetes, Glucose ~ Age)
plot(m2, diabetes, Glucose ~ BMI)
plot(m2, diabetes, Glucose ~ BMI,AGE)
plot(m2, diabetes, Glucose ~ c(BMI,AGE))
plot(m2, diabetes, Glucose ~ c(BMI,Age))
plot(m2, diabetes, Glucose ~ BMI,Age)
shiny::runApp()
runApp()
line(c(1,2,3),c(1,2,3),type="o")
line(c(1,2,3),c(1,2,3),type="p")
?line()
line(c(1,2,3),c(1,2,3))
plot(c(1,2,3),c(1,2,3),type="p")
plot(c(1,2,3),c(1,2,3),type="o")
runApp()
runApp()
plot(c(1,2,3),c(1,2,3),type="s")
plot(c(1,2,3),c(1,2,3),type="b")
plot(c(1,2,3),c(1,2,3),type="b", width=100)
plot(c(1,2,3),c(1,2,3),type="b", lwd=2)
plot(c(1,2,3),c(1,2,3),type="b", lwd=3)
runApp()
shiny::runApp()
